{"version":3,"file":"index.js","sources":["../webpack://acr-scan-action/./src/scan.js","../webpack://acr-scan-action/../../../../../usr/local/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://acr-scan-action/webpack/bootstrap","../webpack://acr-scan-action/webpack/runtime/compat","../webpack://acr-scan-action/webpack/startup"],"sourcesContent":["const core = require('@actions/core');\n\nconst ROAClient = require('@alicloud/pop-core').ROAClient;\nconst RPCClient = require('@alicloud/pop-core').RPCClient;\n\n\nfunction getAPIEndpoint(regionId) {\n    return `https://cr.${regionId}.aliyuncs.com`\n}\n\nasync function run() {\n    let accessKeyId = core.getInput('access-key-id', { required: false });\n    let accessKeySecret = core.getInput('access-key-secret', { required: false });\n    let regionId = core.getInput('region-id', { required: false });\n    let instanceId = core.getInput('instance-id', { required: false });\n    let repository = core.getInput('repository', { required: false });\n    let tag = core.getInput('tag', { required: false });\n\n    if (accessKeyId.length > 0 && accessKeySecret.length > 0) {\n        if (regionId.length == 0) {\n            core.setFailed(`Action failed for region-id is missing`);\n            return;\n        }\n        \n        let endpoint = getAPIEndpoint(regionId);\n\n        if (instanceId.length == 0) {\n\n            try {\n                let client = new ROAClient({\n                    accessKeyId,\n                    accessKeySecret,\n                    endpoint: endpoint,\n                    apiVersion: '2016-06-07'\n                });\n                let url = `/repos/${repository}/tags/${tag}/scan`\n                console.log(`Scanning image ${repository}/${tag} with url ${url} ...`);\n\n                await client.request('PUT', url)\n                console.log(`Scanning image ${repository}/${tag} ...`);\n            } catch (err) {\n                core.setFailed(`Action failed to scan image with error: ${err}`);\n            }\n        } else {\n            let client = new RPCClient({\n                accessKeyId,\n                accessKeySecret,\n                endpoint: endpoint,\n                codes: ['success'], \n                apiVersion: '2018-12-01'\n            });\n            let repoId = \"\"\n            try {\n                let repo = repository.split(\"/\",2)\n                let repoResp = await client.request(\"GetRepository\", {\n                    InstanceId: instanceId,\n                    RegionId: regionId,\n                    RepoStatus: 'NORMAL',\n                    RepoName: repo[1],\n                    RepoNamespaceName: repo[0]\n                });\n                repoId = repoResp.RepoId\n                console.log(`Found image repository ${repository} with repoId ${repoId}`);\n            } catch (err) {\n                core.setFailed(`Action failed to find image repository ${repository} with error: ${err}`);\n                return;\n            }\n            try {\n                let result = await client.request(\"CreateRepoTagScanTask\", {\n                    InstanceId: instanceId,\n                    RegionId: regionId,\n                    RepoId: repoId,\n                    Tag: tag\n                });\n                let requestId = result.RequestId\n                console.log(`Scanning image ${repository}/${tag} with requestId ${requestId} ...`);\n            } catch (err) {\n                core.setFailed(`Action failed to scan image ${repository}/${tag} with error: ${err}`);\n            }\n        }\n    } else {\n        core.setFailed(`access-key-id or access-key-secret is missing`);\n    }\n}\n\nrun().catch(e => core.setFailed(e));",null,"// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\n__webpack_require__.ab = __dirname + \"/\";","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(564);\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;;;;;ACtFA;AACA;AACA;A;;;;;AAFA;AACA;AACA;A;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC5BA;AACA;ACDA;AACA;AACA;AACA;;A","sourceRoot":""}